"use strict";
const fs = require("fs").promises;
const MSG_FILE_PATH = "/mnt/msg/content";
exports.handler = async (event) => {
    console.log(event);
    const method = event.requestContext.http.method;
    if (method === "GET") {
        return sendRes(200, await getMessages());
    }
    else if (method === "POST") {
        await createMessage(event.body);
        return sendRes(200, await getMessages());
    }
    else if (method === "DELETE") {
        await deleteMessages();
        return sendRes(200, await getMessages());
    }
    else {
        return sendRes(200, "Method unsupported");
    }
};
const createMessage = async (message) => {
    try {
        await fs.appendFile(MSG_FILE_PATH, message + "\n");
    }
    catch (error) {
        console.log("error in creating msg", error);
    }
};
const getMessages = async () => {
    try {
        return await fs.readFile(MSG_FILE_PATH, "utf8");
    }
    catch (error) {
        console.log("error in getting messages", error);
    }
};
const deleteMessages = async () => {
    console.log("delete all messages");
    try {
        await fs.unlink(MSG_FILE_PATH);
    }
    catch (error) {
        console.log("error in deleting", error);
    }
};
const sendRes = (status, body) => {
    var response = {
        statusCode: status,
        body: body,
    };
    return response;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibXNnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBRWxDLE1BQU0sYUFBYSxHQUFHLGtCQUFrQixDQUFDO0FBRXpDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQVUsRUFBRSxFQUFFO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRWhELElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtRQUNwQixPQUFPLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0tBQzFDO1NBQU0sSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQzVCLE1BQU0sYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0tBQzFDO1NBQU0sSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzlCLE1BQU0sY0FBYyxFQUFFLENBQUM7UUFDdkIsT0FBTyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sV0FBVyxFQUFFLENBQUMsQ0FBQztLQUMxQztTQUFNO1FBQ0wsT0FBTyxPQUFPLENBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUFDLENBQUM7S0FDM0M7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLEVBQUU7SUFDOUMsSUFBSTtRQUNGLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3BEO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzdDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDN0IsSUFBSTtRQUNGLE9BQU8sTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNqRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNqRDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNuQyxJQUFJO1FBQ0YsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2hDO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFjLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDNUMsSUFBSSxRQUFRLEdBQUc7UUFDYixVQUFVLEVBQUUsTUFBTTtRQUNsQixJQUFJLEVBQUUsSUFBSTtLQUNYLENBQUM7SUFDRixPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKS5wcm9taXNlcztcblxuY29uc3QgTVNHX0ZJTEVfUEFUSCA9IFwiL21udC9tc2cvY29udGVudFwiO1xuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSkgPT4ge1xuICBjb25zb2xlLmxvZyhldmVudCk7XG4gIGNvbnN0IG1ldGhvZCA9IGV2ZW50LnJlcXVlc3RDb250ZXh0Lmh0dHAubWV0aG9kO1xuXG4gIGlmIChtZXRob2QgPT09IFwiR0VUXCIpIHtcbiAgICByZXR1cm4gc2VuZFJlcygyMDAsIGF3YWl0IGdldE1lc3NhZ2VzKCkpO1xuICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJQT1NUXCIpIHtcbiAgICBhd2FpdCBjcmVhdGVNZXNzYWdlKGV2ZW50LmJvZHkpO1xuICAgIHJldHVybiBzZW5kUmVzKDIwMCwgYXdhaXQgZ2V0TWVzc2FnZXMoKSk7XG4gIH0gZWxzZSBpZiAobWV0aG9kID09PSBcIkRFTEVURVwiKSB7XG4gICAgYXdhaXQgZGVsZXRlTWVzc2FnZXMoKTtcbiAgICByZXR1cm4gc2VuZFJlcygyMDAsIGF3YWl0IGdldE1lc3NhZ2VzKCkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzZW5kUmVzKDIwMCwgXCJNZXRob2QgdW5zdXBwb3J0ZWRcIik7XG4gIH1cbn07XG5cbmNvbnN0IGNyZWF0ZU1lc3NhZ2UgPSBhc3luYyAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMuYXBwZW5kRmlsZShNU0dfRklMRV9QQVRILCBtZXNzYWdlICsgXCJcXG5cIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coXCJlcnJvciBpbiBjcmVhdGluZyBtc2dcIiwgZXJyb3IpO1xuICB9XG59O1xuXG5jb25zdCBnZXRNZXNzYWdlcyA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUoTVNHX0ZJTEVfUEFUSCwgXCJ1dGY4XCIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaW4gZ2V0dGluZyBtZXNzYWdlc1wiLCBlcnJvcik7XG4gIH1cbn07XG5cbmNvbnN0IGRlbGV0ZU1lc3NhZ2VzID0gYXN5bmMgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcImRlbGV0ZSBhbGwgbWVzc2FnZXNcIik7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMudW5saW5rKE1TR19GSUxFX1BBVEgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaW4gZGVsZXRpbmdcIiwgZXJyb3IpO1xuICB9XG59O1xuXG5jb25zdCBzZW5kUmVzID0gKHN0YXR1czogbnVtYmVyLCBib2R5OiBhbnkpID0+IHtcbiAgdmFyIHJlc3BvbnNlID0ge1xuICAgIHN0YXR1c0NvZGU6IHN0YXR1cyxcbiAgICBib2R5OiBib2R5LFxuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuIl19